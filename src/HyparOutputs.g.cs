// This code was generated by Hypar.
// Edits to this code will be overwritten the next time code generation occurs.
// DO NOT EDIT THIS FILE.
using Hypar.Functions.Execution;
using Newtonsoft.Json;

namespace Hypar
{
    public class HyparOutputs: ResultsBase
	{
		/// <summary>
		/// The maximum length of a beam.
		/// </summary>
		[JsonProperty("Maximum Beam Length")]
		public double MaximumBeamLength {get;}

		/// <summary>
		/// The minimum length of a beam.
		/// </summary>
		[JsonProperty("Minimum Beam Length")]
		public double MinimumBeamLength {get;}

		/// <summary>
		/// The minimum elevation of any beam's center line vertices.
		/// </summary>
		[JsonProperty("Minimum Elevation")]
		public double MinimumElevation {get;}

		/// <summary>
		/// The maximum elevation of any beam's center line vertices.
		/// </summary>
		[JsonProperty("Maximum Elevation")]
		public double MaximumElevation {get;}


		
		/// <summary>
		/// Construct a HyparOutputs with default inputs.
		/// This should be used only for testing.
		/// </summary>
		public HyparOutputs() : base()
		{

		}
		
		/// <summary>
		/// Construct a HyparOutputs specifying all inputs.
		/// </summary>
		/// <returns></returns>
		[JsonConstructor]
		public HyparOutputs(double maximumbeamlength, double minimumbeamlength, double minimumelevation, double maximumelevation): base()
		{
			this.MaximumBeamLength = maximumbeamlength;
			this.MinimumBeamLength = minimumbeamlength;
			this.MinimumElevation = minimumelevation;
			this.MaximumElevation = maximumelevation;

		}
	}
}