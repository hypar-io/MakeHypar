// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.Collections.Generic;

namespace MakeHypar
{
    public class MakeHyparInputs: S3Args
    {
		/// <summary>
		/// The amplitude in the X direction.
		/// </summary>
		[JsonProperty("X Amplitude")]
		public double XAmplitude {get;}

		/// <summary>
		/// The amplitude in the Y direction.
		/// </summary>
		[JsonProperty("Y Amplitude")]
		public double YAmplitude {get;}

		/// <summary>
		/// The number of panel divisions.
		/// </summary>
		[JsonProperty("Divisions")]
		public double Divisions {get;}

		/// <summary>
		/// A flag indicating whether HSS sections should be used.
		/// </summary>
		[JsonProperty("Use HSS sections")]
		public bool UseHSSSections {get;}



        /// <summary>
        /// Construct a MakeHyparInputs with default inputs.
        /// This should be used for testing only.
        /// </summary>
        public MakeHyparInputs() : base()
        {
			this.XAmplitude = 10;
			this.YAmplitude = 10;
			this.Divisions = 20;
			this.UseHSSSections = false;

        }


        /// <summary>
        /// Construct a MakeHyparInputs specifying all inputs.
        /// </summary>
        /// <returns></returns>
        [JsonConstructor]
        public MakeHyparInputs(double xAmplitude, double yAmplitude, double divisions, bool useHSSSections, string bucketName, string uploadsBucket, Dictionary<string, string> modelInputKeys, string gltfKey, string elementsKey, string ifcKey): base(bucketName, uploadsBucket, modelInputKeys, gltfKey, elementsKey, ifcKey)
        {
			this.XAmplitude = xAmplitude;
			this.YAmplitude = yAmplitude;
			this.Divisions = divisions;
			this.UseHSSSections = useHSSSections;

		}

		public override string ToString()
		{
			var json = JsonConvert.SerializeObject(this);
			return json;
		}
	}
}